# Generated by Django 4.2.22 on 2025-06-07 05:16

import common.models.base_model
from decimal import Decimal
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("bokyak", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AyakUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_id",
                    models.CharField(
                        max_length=50, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("user_name", models.CharField(max_length=100)),
                ("join_date", models.DateTimeField(auto_now_add=True)),
                ("push_agree", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "social_provider",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("social_id", models.CharField(blank=True, max_length=100, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("profile_image_url", models.URLField(blank=True, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("gender", models.CharField(blank=True, max_length=10, null=True)),
                ("notification_enabled", models.BooleanField(default=True)),
                ("marketing_agree", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "ayak_users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="DiseaseCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "disease_code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="질병코드"
                    ),
                ),
                (
                    "disease_name_kr",
                    models.CharField(max_length=500, verbose_name="질병명(한글)"),
                ),
                (
                    "disease_name_en",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="질병명(영문)"
                    ),
                ),
            ],
            options={
                "verbose_name": "질병정보캐시",
                "verbose_name_plural": "질병정보캐시",
                "db_table": "disease_cache",
                "ordering": ["disease_code"],
            },
        ),
        migrations.CreateModel(
            name="Hospital",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일"),
                ),
                (
                    "hospital_id",
                    models.CharField(
                        editable=False,
                        max_length=8,
                        primary_key=True,
                        serialize=False,
                        verbose_name="병원 등록 코드",
                    ),
                ),
                (
                    "hosp_code",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="병원 코드"
                    ),
                ),
                (
                    "hosp_name",
                    models.CharField(blank=True, max_length=100, verbose_name="병원명"),
                ),
                (
                    "hosp_type",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="병원 종별"
                    ),
                ),
                (
                    "doctor_name",
                    models.CharField(blank=True, max_length=30, verbose_name="담당의"),
                ),
                ("address", models.TextField(blank=True, verbose_name="병원 주소")),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="전화번호"
                    ),
                ),
            ],
            options={
                "verbose_name": "병원",
                "verbose_name_plural": "병원들",
                "db_table": "hospitals",
            },
            bases=(models.Model, common.models.base_model.CodeGeneratorMixin),
        ),
        migrations.CreateModel(
            name="HospitalCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hospital_code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="요양기관기호"
                    ),
                ),
                (
                    "hospital_name",
                    models.CharField(max_length=200, verbose_name="요양기관명"),
                ),
                (
                    "hospital_phone",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="전화번호"
                    ),
                ),
                (
                    "hospital_type_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="종별코드"
                    ),
                ),
                (
                    "hospital_type_name",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="종별코드명"
                    ),
                ),
                (
                    "establishment_type_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="설립구분코드"
                    ),
                ),
                (
                    "establishment_type_name",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="설립구분명"
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="우편번호"
                    ),
                ),
                (
                    "address",
                    models.CharField(blank=True, max_length=500, verbose_name="주소"),
                ),
                (
                    "road_address",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="도로명주소"
                    ),
                ),
                (
                    "sido_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="시도코드"
                    ),
                ),
                (
                    "sido_name",
                    models.CharField(blank=True, max_length=50, verbose_name="시도명"),
                ),
                (
                    "sigungu_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="시군구코드"
                    ),
                ),
                (
                    "sigungu_name",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="시군구명"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        max_digits=10,
                        null=True,
                        verbose_name="위도",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        max_digits=10,
                        null=True,
                        verbose_name="경도",
                    ),
                ),
                ("homepage_url", models.URLField(blank=True, verbose_name="홈페이지")),
                (
                    "business_status_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="운영상태코드"
                    ),
                ),
                (
                    "business_status_name",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="운영상태명"
                    ),
                ),
                (
                    "total_doctors",
                    models.IntegerField(default=0, verbose_name="총의사수"),
                ),
                ("total_beds", models.IntegerField(default=0, verbose_name="총병상수")),
                (
                    "medical_subjects",
                    models.JSONField(
                        blank=True, default=list, verbose_name="진료과목목록"
                    ),
                ),
                (
                    "data_reference_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="데이터기준일자"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="활성화여부"),
                ),
                (
                    "last_updated",
                    models.DateTimeField(auto_now=True, verbose_name="최종수정일시"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일시"),
                ),
            ],
            options={
                "verbose_name": "병원정보캐시",
                "verbose_name_plural": "병원정보캐시",
                "db_table": "hospital_cache",
                "ordering": ["hospital_name"],
            },
        ),
        migrations.CreateModel(
            name="Illness",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일"),
                ),
                (
                    "illness_id",
                    models.CharField(
                        editable=False,
                        max_length=8,
                        primary_key=True,
                        serialize=False,
                        verbose_name="질병/증상 코드",
                    ),
                ),
                (
                    "ill_type",
                    models.CharField(
                        choices=[("DISEASE", "질병"), ("SYMPTOM", "증상")],
                        default="DISEASE",
                        max_length=10,
                        verbose_name="구분",
                    ),
                ),
                (
                    "ill_name",
                    models.CharField(max_length=100, verbose_name="질병/증상명"),
                ),
                (
                    "ill_code",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="질병 코드 (ICD-10 등)"
                    ),
                ),
                (
                    "ill_start",
                    models.DateField(
                        blank=True, null=True, verbose_name="발병일/발생일"
                    ),
                ),
                (
                    "ill_end",
                    models.DateField(blank=True, null=True, verbose_name="완치일"),
                ),
                (
                    "is_chronic",
                    models.BooleanField(default=False, verbose_name="만성 질환 여부"),
                ),
            ],
            options={
                "verbose_name": "질병/증상",
                "verbose_name_plural": "질병/증상들",
                "db_table": "illnesses",
            },
            bases=(models.Model, common.models.base_model.CodeGeneratorMixin),
        ),
        migrations.CreateModel(
            name="MainIngredient",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일"),
                ),
                (
                    "ingr_code",
                    models.CharField(
                        help_text="원본 일반명코드 + 해시로 생성된 고유 식별자",
                        max_length=20,
                        primary_key=True,
                        serialize=False,
                        verbose_name="성분 고유 코드",
                    ),
                ),
                (
                    "original_code",
                    models.CharField(
                        db_index=True,
                        help_text="건강보험심사평가원 원본 일반명코드",
                        max_length=12,
                        verbose_name="원본 일반명코드",
                    ),
                ),
                (
                    "dosage_form_code",
                    models.CharField(
                        blank=True,
                        help_text="TB, CH, LQ, PD 등",
                        max_length=3,
                        verbose_name="제형구분코드",
                    ),
                ),
                (
                    "dosage_form",
                    models.CharField(
                        blank=True,
                        help_text="정제, 캡슐제, 액제, 산제 등",
                        max_length=50,
                        verbose_name="제형",
                    ),
                ),
                (
                    "main_ingr_name_kr",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=200,
                        verbose_name="주성분명(한글)",
                    ),
                ),
                (
                    "main_ingr_name_en",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=200,
                        verbose_name="주성분명(영문)",
                    ),
                ),
                (
                    "classification",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="약물 분류 번호",
                        null=True,
                        verbose_name="분류번호",
                    ),
                ),
                (
                    "route",
                    models.CharField(
                        blank=True,
                        help_text="내복, 외용, 주사 등",
                        max_length=20,
                        verbose_name="투여경로",
                    ),
                ),
                (
                    "main_ingr_density",
                    models.DecimalField(
                        decimal_places=6,
                        default=Decimal("0"),
                        max_digits=12,
                        verbose_name="주성분 함량",
                    ),
                ),
                (
                    "main_ingr_unit",
                    models.CharField(
                        default="mg",
                        help_text="mg, g, ml, % 등",
                        max_length=20,
                        verbose_name="함량 단위",
                    ),
                ),
                (
                    "original_density_notation",
                    models.CharField(
                        blank=True,
                        help_text="1.1g(55mg/mL), 2mg/정(A정 14정중) 등 원본 표기",
                        max_length=100,
                        verbose_name="원본 함량 표기",
                    ),
                ),
                (
                    "is_combination_drug",
                    models.BooleanField(
                        default=False,
                        help_text="하나의 일반명코드에 여러 성분이 포함된 경우",
                        verbose_name="복합제 여부",
                    ),
                ),
                (
                    "combination_group",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="같은 복합제에 속한 성분들의 그룹 식별자",
                        max_length=12,
                        verbose_name="복합제 그룹",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="활성 상태"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="비고")),
                (
                    "data_quality_score",
                    models.IntegerField(
                        default=0,
                        help_text="0-100, 한글명/영문명/함량 완성도 기준",
                        verbose_name="데이터 품질 점수",
                    ),
                ),
            ],
            options={
                "verbose_name": "주성분",
                "verbose_name_plural": "주성분들",
                "db_table": "main_ingredients",
                "ordering": [
                    "-data_quality_score",
                    "main_ingr_name_kr",
                    "main_ingr_name_en",
                ],
            },
        ),
        migrations.CreateModel(
            name="Medication",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일"),
                ),
                (
                    "medication_id",
                    models.BigIntegerField(
                        primary_key=True, serialize=False, verbose_name="의약품 코드"
                    ),
                ),
                (
                    "medication_name",
                    models.CharField(max_length=200, verbose_name="의약품명"),
                ),
                (
                    "main_item_ingr",
                    models.CharField(
                        help_text="국문 주성분", max_length=100, null=True
                    ),
                ),
                (
                    "main_ingr_eng",
                    models.CharField(
                        help_text="영문 주성분", max_length=100, null=True
                    ),
                ),
                ("manufacturer", models.CharField(help_text="제조사", max_length=100)),
                (
                    "item_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="medications/",
                        verbose_name="의약품 이미지",
                    ),
                ),
            ],
            options={
                "verbose_name": "의약품",
                "verbose_name_plural": "의약품들",
                "db_table": "medications",
            },
        ),
        migrations.CreateModel(
            name="UserMedicalInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일"),
                ),
                (
                    "hospital",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.hospital",
                        verbose_name="병원",
                    ),
                ),
                (
                    "illness",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.illness",
                        verbose_name="질병/증상",
                    ),
                ),
                (
                    "prescription",
                    models.ForeignKey(
                        help_text="처방전",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="medical_infos",
                        to="bokyak.prescription",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="medical_info",
                        to="user.ayakuser",
                        verbose_name="사용자",
                    ),
                ),
            ],
            options={
                "verbose_name": "사용자 의료정보",
                "verbose_name_plural": "사용자 의료정보들",
                "db_table": "user_medical_info",
            },
        ),
        migrations.CreateModel(
            name="MedicationIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일"),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, help_text="함량", max_digits=10
                    ),
                ),
                ("unit", models.CharField(help_text="단위", max_length=20)),
                (
                    "is_main",
                    models.BooleanField(
                        default=True, help_text="False인 경우 부형제나 첨가제"
                    ),
                ),
                (
                    "ingredient_role",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="성분역할"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="비고")),
                (
                    "main_ingredient",
                    models.ForeignKey(
                        help_text="성분",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="medications",
                        to="user.mainingredient",
                    ),
                ),
                (
                    "medication",
                    models.ForeignKey(
                        help_text="약물",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="user.medication",
                    ),
                ),
            ],
            options={
                "verbose_name": "의약품 주성분",
                "verbose_name_plural": "의약품 주성분들",
                "db_table": "medication_ingredients",
            },
        ),
        migrations.AddField(
            model_name="medication",
            name="main_ingredients",
            field=models.ManyToManyField(
                blank=True,
                related_name="related_medications",
                through="user.MedicationIngredient",
                to="user.mainingredient",
                verbose_name="주성분들",
            ),
        ),
        migrations.AddIndex(
            model_name="mainingredient",
            index=models.Index(
                fields=["original_code"], name="idx_main_ingr_orig_code"
            ),
        ),
        migrations.AddIndex(
            model_name="mainingredient",
            index=models.Index(
                fields=["main_ingr_name_kr"], name="idx_main_ingr_name_kr"
            ),
        ),
        migrations.AddIndex(
            model_name="mainingredient",
            index=models.Index(
                fields=["main_ingr_name_en"], name="idx_main_ingr_name_en"
            ),
        ),
        migrations.AddIndex(
            model_name="mainingredient",
            index=models.Index(fields=["classification"], name="idx_main_ingr_class"),
        ),
        migrations.AddIndex(
            model_name="mainingredient",
            index=models.Index(
                fields=["combination_group"], name="idx_main_ingr_combo"
            ),
        ),
        migrations.AddIndex(
            model_name="mainingredient",
            index=models.Index(
                fields=["is_combination_drug", "is_active"], name="idx_main_ingr_status"
            ),
        ),
        migrations.AddField(
            model_name="illness",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="illnesses",
                to="user.ayakuser",
                verbose_name="사용자",
            ),
        ),
        migrations.AddIndex(
            model_name="hospitalcache",
            index=models.Index(
                fields=["hospital_code"], name="hospital_ca_hospita_3ceff8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hospitalcache",
            index=models.Index(
                fields=["hospital_name"], name="hospital_ca_hospita_061963_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hospitalcache",
            index=models.Index(
                fields=["sido_code", "sigungu_code"],
                name="hospital_ca_sido_co_743ceb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="hospitalcache",
            index=models.Index(
                fields=["hospital_type_code"], name="hospital_ca_hospita_c946a4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hospitalcache",
            index=models.Index(
                fields=["is_active"], name="hospital_ca_is_acti_31594b_idx"
            ),
        ),
        migrations.AddField(
            model_name="hospital",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="hospitals",
                to="user.ayakuser",
                verbose_name="사용자",
            ),
        ),
        migrations.AddField(
            model_name="ayakuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="ayakuser_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="ayakuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="ayakuser_permissions_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="usermedicalinfo",
            constraint=models.UniqueConstraint(
                fields=("user", "hospital", "illness"), name="unique_user_medical_info"
            ),
        ),
        migrations.AddIndex(
            model_name="medicationingredient",
            index=models.Index(fields=["medication"], name="idx_med_ingr_med"),
        ),
        migrations.AddIndex(
            model_name="medicationingredient",
            index=models.Index(fields=["main_ingredient"], name="idx_med_ingr_ingr"),
        ),
        migrations.AlterUniqueTogether(
            name="medicationingredient",
            unique_together={("medication", "main_ingredient")},
        ),
        migrations.AddConstraint(
            model_name="illness",
            constraint=models.UniqueConstraint(
                fields=("user", "ill_name", "ill_type"), name="unique_user_illness"
            ),
        ),
        migrations.AddConstraint(
            model_name="hospital",
            constraint=models.UniqueConstraint(
                fields=("user", "hosp_code"), name="unique_user_hospital"
            ),
        ),
    ]
